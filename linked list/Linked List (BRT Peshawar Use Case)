#include<iostream>
using namespace std;

struct Node {
    int passID;
    Node* next;

    Node(int argData)
    {
        passID = argData;
        next = nullptr;
    }
};

class linklist {
    private:
        Node* head;
    public:
    linklist(){
        head=nullptr;
    }    

    ~linklist(){
        Node* curr = head;
        while(curr){
            Node* next = curr->next;
            delete curr;
            curr = next;
        }

    }

void insertAtBeginning(int value){
    Node* node = new Node(value);
    node->next = head;
    head = node;
}

void insertAtEnd(int value){
    Node* node = new Node(value);

    if (head == nullptr){
        head = node;
        return;
    }

    Node* curr = head;

    while (curr->next != nullptr){

        curr = curr->next;
    }
    curr->next = node;
}

void insertAtPosition(int value , int position){

    Node* node = new Node(value);

    if (position == 0 ) {
        node->next = head;
        head = node;
        return;
    }

    Node* curr = head;
    for (int i = 0; curr != nullptr && i < position -1; i++){
        curr = curr->next;
    }

    if (curr == nullptr){
        cout<<"Postion is out of range, inserting at end.\n";
        insertAtEnd(value);
        return;
    }
    node->next = curr->next;
    curr->next = node;
}

bool deleteFromBeginning(int* removedvalue = nullptr){
    if (head == nullptr) return false;

    Node* temp = head;
    if (removedvalue){
        *removedvalue = temp->passID;
    }
    head = head->next;
    delete temp;
    return true;
}

 void display() {
        Node* curr = head;
        while (curr != nullptr) {
            cout << curr->passID;
            if (curr->next != nullptr) cout << " -> ";
            curr = curr->next;
        }
        cout << endl;
    }

};

int main(){
        linklist list;

    // Step 1: Add 3 passengers at the end
    list.insertAtEnd(101);
    list.insertAtEnd(102);
    list.insertAtEnd(103);
    cout << "Initial Queue after adding passengers:\n";
    list.display();

    // Step 2: Emergency passenger at beginning
    list.insertAtBeginning(999);
    cout << "After adding an emergency passenger at beginning:\n";
    list.display();

    // Step 3: Special booking passenger at position 2
    list.insertAtPosition(555, 2);
    cout << "After inserting special booking passenger at position 2:\n";
    list.display();

    // Step 4: First passenger boards (delete from beginning)
    int removed;
    list.deleteFromBeginning(&removed);
    cout << "After first passenger boards (deletion):\n";
    list.display();

    return 0;
}
